# Multi-stage build for production
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git gcc musl-dev patch

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy patch files
COPY patches/ /app/patches/

# Apply eventstore patch for QueryKindsLimit
RUN cd $(go env GOPATH)/pkg/mod/github.com/fiatjaf/eventstore@* && \
    patch -p1 < /app/patches/eventstore-querykindslimit.patch

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.version=${VERSION:-dev}" \
    -o wot-relay .

# Final stage
FROM alpine:3.18

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    wget \
    tzdata

# Create non-root user
RUN adduser -D -s /bin/sh -u 1000 wotrelay

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/wot-relay /app/wot-relay

# Copy templates
COPY --from=builder /app/templates /app/templates

# Create data directory
RUN mkdir -p /app/data && chown -R wotrelay:wotrelay /app

# Switch to non-root user
USER wotrelay

# Expose port
EXPOSE 3334

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3334/health || exit 1

# Run the application
CMD ["./wot-relay"]
